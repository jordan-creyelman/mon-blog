"use strict";(self.webpackChunkmon_blog=self.webpackChunkmon_blog||[]).push([[9637],{2397:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/05/13/sqli","metadata":{"permalink":"/mon-blog/2025/05/13/sqli","source":"@site/blog/2025-05-13-sqli.md","title":"sqli","description":"Voici un article en Markdown adapt\xe9 pour \xeatre utilis\xe9 dans un site Docusaurus (par exemple dans le dossier docs/) sur le th\xe8me de SQL Injection (SQLi), couvrant :","date":"2025-05-13T00:00:00.000Z","tags":[],"readingTime":3.3,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"nextItem":{"title":"Welcome","permalink":"/mon-blog/welcome"}},"content":"Voici un article en **Markdown** adapt\xe9 pour \xeatre utilis\xe9 dans un site **Docusaurus** (par exemple dans le dossier `docs/`) sur le th\xe8me de **SQL Injection (SQLi)**, couvrant :\\n\\n* D\xe9finition\\n* Types\\n* Particularit\xe9s selon les bases de donn\xe9es\\n* Techniques (commentaires, d\xe9tection du nombre de colonnes, encodage WAF)\\n* Compatible pour une publication \xe0 la date du **13 mai 2025**\\n\\n---\\n\\n````markdown\\n---\\ntitle: Comprendre les SQL Injections (SQLi)\\ndescription: Un guide sur les types de SQLi, leur fonctionnement, les diff\xe9rences entre les bases de donn\xe9es, et les techniques de contournement.\\nslug: sqli\\ndate: 2025-05-13\\nkeywords:\\n  - sqli\\n  - injection\\n  - s\xe9curit\xe9\\n  - base de donn\xe9es\\n---\\n\\n# Qu\'est-ce qu\'une SQL Injection (SQLi) ?\\n\\nUne **SQL Injection** est une vuln\xe9rabilit\xe9 qui permet \xe0 un attaquant d\'injecter des requ\xeates SQL arbitraires dans l\'application. Cela peut lui permettre d\'acc\xe9der \xe0 des donn\xe9es sensibles, de modifier ou de supprimer des enregistrements, voire d\'ex\xe9cuter des commandes sur le serveur dans certains cas.\\n\\n\x3c!--truncate--\x3e\\n\\nExemple simple :\\n\\n```sql\\nSELECT * FROM users WHERE username = \'$username\';\\n````\\n\\nSi l\'utilisateur entre `\' OR 1=1--`, la requ\xeate devient :\\n\\n```sql\\nSELECT * FROM users WHERE username = \'\' OR 1=1--\';\\n```\\n\\nR\xe9sultat : retour de tous les utilisateurs.\\n\\n---\\n\\n# Types de SQLi\\n\\n## 1. **SQLi classique (In-band)**\\n\\n* **Erreur visible ou r\xe9ponse directe**\\n* Utilisation des op\xe9rateurs logiques (`OR`, `AND`) pour manipuler les r\xe9sultats.\\n\\n## 2. **Blind SQLi**\\n\\n* Le r\xe9sultat n\u2019est pas visible, mais on peut d\xe9duire des informations par les temps de r\xe9ponse ou les erreurs.\\n\\n  * **Boolean-based** : test vrai/faux.\\n  * **Time-based** : injection de fonctions comme `SLEEP()`.\\n\\n## 3. **Out-of-band SQLi**\\n\\n* Exploitation via des canaux externes (ex. DNS ou HTTP).\\n* Rare, mais utile si les autres m\xe9thodes \xe9chouent.\\n\\n## 4. **Second-order SQLi**\\n\\n* L\'injection se fait lors d\'une premi\xe8re action (ex: inscription), mais est exploit\xe9e lors d\u2019un second traitement (ex: affichage admin).\\n\\n---\\n\\n# Particularit\xe9s selon la base de donn\xe9es\\n\\n## MySQL\\n\\n* Commentaires : `-- ` ou `#`\\n* Concat\xe9nation : `CONCAT()`\\n* D\xe9lai : `SLEEP(5)`\\n\\n## PostgreSQL\\n\\n* Commentaires : `-- `\\n* Concat\xe9nation : `||`\\n* D\xe9lai : `pg_sleep(5)`\\n\\n## SQL Server\\n\\n* Commentaires : `-- `\\n* Concat\xe9nation : `+`\\n* D\xe9lai : `WAITFOR DELAY \'0:0:5\'`\\n\\n## Oracle\\n\\n* Commentaires : `-- `\\n* Concat\xe9nation : `||`\\n* D\xe9lai : `dbms_pipe.receive_message(\'a\',5)`\\n\\n---\\n\\n# Comment d\xe9tecter le nombre de colonnes (UNION SELECT)\\n\\nUne des premi\xe8res \xe9tapes lors d\u2019une SQLi avec `UNION` est de d\xe9terminer le nombre de colonnes dans la requ\xeate originale :\\n\\n```sql\\n\' ORDER BY 1-- \\n\' ORDER BY 2-- \\n\' ORDER BY 3-- \\n```\\n\\nQuand une erreur survient, le dernier nombre est trop \xe9lev\xe9.\\n\\nEnsuite, on peut tester avec `UNION` :\\n\\n```sql\\n\' UNION SELECT NULL-- \\n\' UNION SELECT NULL,NULL-- \\n\' UNION SELECT NULL,NULL,NULL-- \\n```\\n\\nJusqu\'\xe0 ne plus obtenir d\'erreur \u2192 on a trouv\xe9 le bon nombre de colonnes.\\n\\n---\\n\\n# Commentaires utiles pour masquer ou terminer les requ\xeates\\n\\n* `--` (standard SQL)\\n* `#` (MySQL)\\n* `/* ... */` (multi-ligne)\\n\\nExemples :\\n\\n```sql\\n\' OR 1=1-- \\n\' OR 1=1# \\n\' OR 1=1/* */\\n```\\n\\n---\\n\\n# Contourner les WAF (Web Application Firewall)\\n\\nLes WAF essaient de d\xe9tecter les patterns suspects. Quelques techniques de contournement :\\n\\n### 1. **Encodage**\\n\\n* URL encoding : `\'` devient `%27`\\n* Double encoding : `%2527` pour `%27`\\n\\n### 2. **Casse ou espacement**\\n\\n```sql\\nUnIoN SeLeCt\\nUNION/**/SELECT\\n```\\n\\n### 3. **Fonctions alternatives**\\n\\n* `CONCAT()` \u2192 `CONCAT_WS()`\\n* `UNION` \u2192 `/*!UNION*/`\\n\\n### 4. **Utilisation d\u2019expressions r\xe9guli\xe8res ou char-coding**\\n\\n```sql\\nSELECT CHAR(65,66,67)-- au lieu de \'ABC\'\\n```\\n\\n---\\n\\n# Conclusion\\n\\nLes **SQL Injections** restent une menace s\xe9rieuse en cybers\xe9curit\xe9. Comprendre leurs m\xe9canismes, leurs variantes selon les bases de donn\xe9es, et les techniques de d\xe9tection est essentiel pour tout pentesteur ou d\xe9veloppeur souhaitant s\xe9curiser ses applications.\\n\\n> **Bonnes pratiques** :\\n>\\n> * Toujours utiliser des requ\xeates pr\xe9par\xe9es (prepared statements)\\n> * Ne jamais faire confiance \xe0 l\u2019entr\xe9e utilisateur\\n> * Utiliser des WAF intelligents, mais ne jamais s\u2019y reposer totalement"},{"id":"welcome","metadata":{"permalink":"/mon-blog/welcome","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","tags":[{"inline":false,"label":"Facebook","permalink":"/mon-blog/tags/facebook","description":"Facebook tag description"},{"inline":false,"label":"Hello","permalink":"/mon-blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/mon-blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.465,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/mon-blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/mon-blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"sqli","permalink":"/mon-blog/2025/05/13/sqli"},"nextItem":{"title":"MDX Blog Post","permalink":"/mon-blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nHere are a few tips you might find useful.\\n\\n\x3c!-- truncate --\x3e\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/mon-blog/mdx-blog-post","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/mon-blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.235,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/mon-blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Welcome","permalink":"/mon-blog/welcome"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n:::\\n\\n{/* truncate */}\\n\\nFor example, use JSX to create an interactive button:\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>"}]}}')}}]);